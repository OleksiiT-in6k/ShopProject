/**
 * Created by employee on 7/21/16.
 */

import com.interlink.*;
import org.junit.BeforeClass;
import org.junit.Test;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.*;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;

public class TestCategoryAndItemDAO {

    private static ShopDAO shopDAO;
    private static Connection connection;


    @BeforeClass
    public static void init() throws Exception {
        connection = DriverManager.getConnection("jdbc:hsqldb:mem:db", "", "");
        createTables(connection);
        fillTables(connection);
        prepareConnectionFactory();

    }

    private static void prepareConnectionFactory() {
        ConnectionFactory connectionFactory = new ConnectionFactory() {
            public Connection getConnection() {
                return connection;
            }
        };
        shopDAO = new ShopDAO(connectionFactory);
    }


    private static void createTables(Connection connection)
            throws SQLException {
        PreparedStatement statement = connection.prepareStatement("CREATE TABLE Categories " +
                "(id INT GENERATED BY DEFAULT AS IDENTITY, NAME VARCHAR(255), primary key(id));");
        statement.execute();
        statement = connection.prepareStatement("CREATE TABLE Items (id INT GENERATED BY DEFAULT AS IDENTITY," +
                "name VARCHAR(255), number int, price decimal(7,2), category_id int, primary key(id));");
        statement.execute();
        statement = connection.prepareStatement("CREATE TABLE Users (id INT GENERATED BY DEFAULT AS IDENTITY," +
                "name VARCHAR(255), primary key(id));");
        statement.execute();
        statement = connection.prepareStatement("CREATE TABLE Orders (id INT GENERATED BY DEFAULT AS IDENTITY," +
                "user_id int,dateTime datetime,total decimal(7,2), primary key(id));");
        statement.execute();
        statement = connection.prepareStatement("CREATE TABLE Orders_Items (id INT GENERATED BY DEFAULT AS IDENTITY," +
                "order_id int,item_id int,number int, primary key(id));");
        statement.execute();
        statement.close();
    }

    private static void fillTables(Connection connection) throws SQLException {
        PreparedStatement statement = connection.prepareStatement("INSERT INTO Categories " +
                "(name) VALUES ('phone'),('TV'),('laptop')");
        statement.execute();
        statement = connection.prepareStatement("INSERT INTO Items " +
                "(name,number,price,category_id) VALUES ('Nokia',4,250,0),('LG', 2,500,1),('SONY',1,600,1)," +
                "('Lenovo',2,400,2),('ASUS',5,350,2),('HP',7,400,2),('ACER',4,300,2),('DELL',7,450,2)");
        statement.execute();
        statement = connection.prepareStatement("INSERT INTO Orders " +
                "(user_id,dateTime,total) VALUES (0,'2016-06-18 10:34:09','14250'),(1,'2016-02-14 8:47:01','1100')," +
                "(0,'2016-07-08 12:34:44','5000');");
        statement.execute();
        statement = connection.prepareStatement("INSERT INTO Orders_Items " +
                "(order_id,item_id,number) VALUES (0,3,7),(0,4,9),(0,5,11),(0,6,10),(0,7,2),(1,1,3),(1,2,3)");
        statement.execute();
        statement = connection.prepareStatement("INSERT INTO USERS (name) VALUES ('IVAN IVANOVICH')");
        statement.close();
    }


    @Test
    public void testCategoryWithItemsNumber() throws Exception {
        Map<Category, Integer> expected = new HashMap<>();
        expected.put(new Category("phone"), 1);
        expected.put(new Category("TV"), 2);
        expected.put(new Category("laptop"), 5);
        assertThat(shopDAO.getCategoriesWithItemNumber(), is(expected));
    }

    @Test
    public void testTop3ItemsFromNonexistentCategory() throws Exception {
        LocalDateTime today = LocalDateTime.of(2016, 7, 7, 10, 10);
        assertThat(shopDAO.getTop3ItemsFromCategory("blender", today), is(Collections.EMPTY_LIST));

    }

    @Test
    public void testTop3ItemsFromCategoryWithNoPurchases() throws Exception {
        List<Item> expected = new ArrayList();
        LocalDateTime today = LocalDateTime.of(2016, 6, 6, 10, 10);
        assertThat(shopDAO.getTop3ItemsFromCategory("phone", today), is(expected));
    }

    @Test
    public void testTop3ItemsFromCategory() throws Exception {
        List<Item> expected = new ArrayList();
        Item item = new Item("HP", 7, new BigDecimal("400.00"));
        item.setCategoryId(2);
        expected.add(item);
        item = new Item("ACER", 4, new BigDecimal("300.00"));
        item.setCategoryId(2);
        expected.add(item);
        item = new Item("ASUS", 5, new BigDecimal("350.00"));
        item.setCategoryId(2);
        expected.add(item);
        LocalDateTime today = LocalDateTime.of(2016, 7, 7, 10, 10);
        assertThat(shopDAO.getTop3ItemsFromCategory("laptop", today), is(expected));
    }


    @Test
    public void testGetOrdersUserWithSingleOrder() throws Exception {
        Order order = new Order(LocalDateTime.of(2016, 2, 14, 8, 47, 1), 1, new BigDecimal("1100.00"));
        List<Order> expected = new ArrayList<>();
        expected.add(order);
        assertThat(shopDAO.getOrdersForUser(1), is(expected));
    }

    @Test
    public void testGetOrdersForUser() throws Exception {
        Order firstOrder = new Order(LocalDateTime.of(2016, 6, 18, 10, 34, 9), 0, new BigDecimal("14250.00"));
        Order secondOrder = new Order(LocalDateTime.of(2016, 7, 8, 12, 34, 44), 0, new BigDecimal("5000.00"));
        List<Order> expected = new ArrayList<>();
        expected.add(firstOrder);
        expected.add(secondOrder);
        assertThat(shopDAO.getOrdersForUser(0), is(expected));
    }

    @Test
    public void testGetItemsForNonexistentOrder() throws Exception {
        assertThat(shopDAO.getItemsForOrder(7), is(Collections.EMPTY_LIST));
    }

    @Test
    public void testGetItemsForOrder() throws Exception {
        List<Item> expected = new ArrayList<>();
        Item itemFirst = new Item("LG", 2, new BigDecimal("500.00"));
        itemFirst.setCategoryId(1);
        expected.add(itemFirst);
        Item itemSecond = new Item("SONY", 1, new BigDecimal("600.00"));
        itemSecond.setCategoryId(1);
        expected.add(itemSecond);
        assertThat(shopDAO.getItemsForOrder(1), is(expected));
    }
}
